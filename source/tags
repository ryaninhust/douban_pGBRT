!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ARGS_H	args.h	28;"	d
COMPILER	Makefile	/^COMPILER=mpicxx$/;"	m
CompareDocuments	metrics.h	/^class CompareDocuments {$/;"	c
CompareFeatureValuePairs	FeatureData.h	/^struct CompareFeatureValuePairs {$/;"	s
Document	metrics.h	/^struct Document {$/;"	s
FEATURE_DATA_H	FeatureData.h	2;"	d
FeatureData	FeatureData.h	/^FeatureData::FeatureData(int n, int numfeatures_, int isrankingset_, int myid_, int numprocs_) {$/;"	f	class:FeatureData
FeatureData	FeatureData.h	/^class FeatureData { \/\/ represents a training data set distributed among processors feature-wise$/;"	c
FeatureValuePair	FeatureData.h	/^class FeatureValuePair {$/;"	c
GCC	Makefile	/^GCC=-O3 -ftree-vectorize$/;"	m
ICC	Makefile	/^ICC=-O3 -fp-model fast -xHost -ipo -no-prec-div$/;"	m
INSTANCE_DATA_H	InstanceData.h	2;"	d
InstanceData	InstanceData.h	/^InstanceData::InstanceData(int n, int numfeatures_, bool isrankingset_, int mini, int maxi) {$/;"	f	class:InstanceData
InstanceData	InstanceData.h	/^class InstanceData { \/\/ represents a test data set distributed among processors instance-wise$/;"	c
LOSS_H	loss.h	2;"	d
METRICS_H	metrics.h	2;"	d
N	FeatureData.h	/^		int N; \/\/ number of data instances$/;"	m	class:FeatureData
N	InstanceData.h	/^		int N; \/\/ number of data instances$/;"	m	class:InstanceData
N	SplitsBuffer.h	/^		int N, buffersize;$/;"	m	class:SplitsBuffer
R	metrics.h	/^static double R(double y) {$/;"	f
SPLITSBUFFER_H	SplitsBuffer.h	2;"	d
STATIC_TREE_H	StaticTree.h	2;"	d
SparseFeature	FeatureData.h	/^struct SparseFeature {$/;"	s
SplitsBuffer	SplitsBuffer.h	/^SplitsBuffer::SplitsBuffer(int n) {$/;"	f	class:SplitsBuffer
SplitsBuffer	SplitsBuffer.h	/^class SplitsBuffer {$/;"	c
StaticNode	StaticTree.h	/^class StaticNode {$/;"	c
StaticTree	StaticTree.h	/^StaticTree::StaticTree(int depth_) {$/;"	f	class:StaticTree
StaticTree	StaticTree.h	/^class StaticTree {$/;"	c
VectorSortP	FeatureData.h	/^struct VectorSortP {$/;"	s
applyToData	SplitsBuffer.h	/^void SplitsBuffer::applyToData(FeatureData* data) {$/;"	f	class:SplitsBuffer
args_t	args.h	/^struct args_t {$/;"	s
binarySearch	FeatureData.h	/^int FeatureData::binarySearch(int f, int i) {$/;"	f	class:FeatureData
broadcast	SplitsBuffer.h	/^void SplitsBuffer::broadcast(int root) {$/;"	f	class:SplitsBuffer
broadcastReduce	SplitsBuffer.h	/^void SplitsBuffer::broadcastReduce(int root, int myid) {$/;"	f	class:SplitsBuffer
buffer	SplitsBuffer.h	/^		unsigned int* buffer;$/;"	m	class:SplitsBuffer
buffersize	SplitsBuffer.h	/^		int N, buffersize;$/;"	m	class:SplitsBuffer
buildtree	main.cpp	/^void buildtree(args_t args, StaticTree* tree, FeatureData* data, SplitsBuffer* splits, int maxDepth, int numProcs, int numtree) {$/;"	f
classifyDataPoint	StaticTree.h	/^double StaticTree::classifyDataPoint(InstanceData* data, int p) {$/;"	f	class:StaticTree
clear	SplitsBuffer.h	/^void SplitsBuffer::clear() {$/;"	f	class:SplitsBuffer
clear	StaticTree.h	/^void StaticTree::clear() {$/;"	f	class:StaticTree
clearNode	StaticTree.h	/^void StaticTree::clearNode(StaticNode* node) {$/;"	f	class:StaticTree
computeBoostingRankingMetrics	metrics.h	/^static void computeBoostingRankingMetrics(int N, int *qid, double *pred, double *label, double* idealdcg, double &rawerr, double &rawndcg) {$/;"	f
computeBoostingSE	metrics.h	/^static double computeBoostingSE(int N, double *label, double *pred) {$/;"	f
computeIdealDCG	metrics.h	/^static void computeIdealDCG(int N, int *qid, double *label, double *idealdcg) {$/;"	f
computeMetrics	FeatureData.h	/^void FeatureData::computeMetrics(double &rmse, double &err, double &ndcg) {$/;"	f	class:FeatureData
computeMetrics	InstanceData.h	/^void InstanceData::computeMetrics(double &rmse, double &err, double &ndcg) {$/;"	f	class:InstanceData
computeNumFeatures	FeatureData.h	/^int FeatureData::computeNumFeatures(int nf, int numprocs, int myid) {$/;"	f	class:FeatureData
computeNumQueries	metrics.h	/^static int computeNumQueries(int N, int *qid) {$/;"	f
computeRankingMetrics	args.h	/^	bool computeRankingMetrics;$/;"	m	struct:args_t
computegradient	loss.h	/^void computegradient(int N, double *label, double *pred, int *qid, double *residual) {$/;"	f
computemetrics	main.cpp	/^void computemetrics(args_t a, FeatureData* train, InstanceData* valid, InstanceData* test, int iter) {$/;"	f
containsSplittingFeature	StaticTree.h	/^bool StaticTree::containsSplittingFeature(FeatureData* data) {$/;"	f	class:StaticTree
depth	StaticTree.h	/^                int depth, layer, nodes;$/;"	m	class:StaticTree
exchange	SplitsBuffer.h	/^void SplitsBuffer::exchange() {$/;"	f	class:SplitsBuffer
exchangeBestSplits	StaticTree.h	/^void StaticTree::exchangeBestSplits() {$/;"	f	class:StaticTree
feature	StaticTree.h	/^                int feature;$/;"	m	class:StaticNode
features	InstanceData.h	/^		vector<double>** features; \/\/ feature values$/;"	m	class:InstanceData
findBestLocalSplits	StaticTree.h	/^void StaticTree::findBestLocalSplits(FeatureData* data, int numtree) {$/;"	f	class:StaticTree
getBuffer	SplitsBuffer.h	/^unsigned int* SplitsBuffer::getBuffer() {$/;"	f	class:SplitsBuffer
getBufferSize	SplitsBuffer.h	/^int SplitsBuffer::getBufferSize() {$/;"	f	class:SplitsBuffer
getFeature	FeatureData.h	/^double FeatureData::getFeature(int f, int i) {	$/;"	f	class:FeatureData
getFeature	InstanceData.h	/^double InstanceData::getFeature(int f, int i) {$/;"	f	class:InstanceData
getN	FeatureData.h	/^int FeatureData::getN() {$/;"	f	class:FeatureData
getN	InstanceData.h	/^int InstanceData::getN() {$/;"	f	class:InstanceData
getNode	FeatureData.h	/^int FeatureData::getNode(int i) {$/;"	f	class:FeatureData
getNumFeatures	FeatureData.h	/^int FeatureData::getNumFeatures() {$/;"	f	class:FeatureData
getNumFeatures	InstanceData.h	/^int InstanceData::getNumFeatures() {$/;"	f	class:InstanceData
getNumNodes	StaticTree.h	/^int StaticTree::getNumNodes() {$/;"	f	class:StaticTree
getNumQueries	FeatureData.h	/^int FeatureData::getNumQueries() {$/;"	f	class:FeatureData
getNumQueries	InstanceData.h	/^int InstanceData::getNumQueries() {$/;"	f	class:InstanceData
getResidual	FeatureData.h	/^double FeatureData::getResidual(int i) {$/;"	f	class:FeatureData
getSortedFeature	FeatureData.h	/^double FeatureData::getSortedFeature(int f, int i) {$/;"	f	class:FeatureData
getSortedIndex	FeatureData.h	/^int FeatureData::getSortedIndex(int f, int i) {$/;"	f	class:FeatureData
getSplit	StaticTree.h	/^void StaticTree::getSplit(int node, int &feature, double &split) {$/;"	f	class:StaticTree
get_args	args.h	/^static bool get_args(int argc, char* argv[], args_t& args, int myid, int numProcs) {$/;"	f
globalFeatureIndex	FeatureData.h	/^int FeatureData::globalFeatureIndex(int lf) {$/;"	f	class:FeatureData
i_index	FeatureData.h	/^	int i_index;$/;"	m	struct:SparseFeature
idealdcg	FeatureData.h	/^		double* idealdcg; \/\/ ideal dcg by query$/;"	m	class:FeatureData
idealdcg	InstanceData.h	/^		double* idealdcg; \/\/ ideal dcg by query$/;"	m	class:InstanceData
index	FeatureData.h	/^		int index;$/;"	m	class:FeatureValuePair
initMetrics	FeatureData.h	/^void FeatureData::initMetrics() {$/;"	f	class:FeatureData
initMetrics	InstanceData.h	/^void InstanceData::initMetrics() {$/;"	f	class:InstanceData
initialize_args	args.h	/^static void initialize_args(args_t& a) {$/;"	f
isLocalFeature	FeatureData.h	/^bool FeatureData::isLocalFeature(int f) {$/;"	f	class:FeatureData
isRoot	args.h	/^    bool isRoot;$/;"	m	struct:args_t
isrankingset	FeatureData.h	/^		bool isrankingset; \/\/ whether qids should be expected in file, also whether to compute ranking metrics$/;"	m	class:FeatureData
isrankingset	InstanceData.h	/^		bool isrankingset; \/\/ whether qids should be expected in file, also whether to compute ranking metrics$/;"	m	class:InstanceData
l_infty	StaticTree.h	/^                double l_infty, l_s;$/;"	m	class:StaticNode
l_s	StaticTree.h	/^                double l_infty, l_s;$/;"	m	class:StaticNode
label	FeatureData.h	/^		double* label; \/\/ target label value of each instance$/;"	m	class:FeatureData
label	InstanceData.h	/^		double* label; \/\/ target label value of each instance$/;"	m	class:InstanceData
label	StaticTree.h	/^                double label, loss;$/;"	m	class:StaticNode
label	metrics.h	/^	double label;$/;"	m	struct:Document
labeltemp	InstanceData.h	/^		vector<double>* labeltemp;$/;"	m	class:InstanceData
layer	StaticTree.h	/^                int depth, layer, nodes;$/;"	m	class:StaticTree
layers	StaticTree.h	/^                StaticNode*** layers;$/;"	m	class:StaticTree
learningRate	args.h	/^	double learningRate;$/;"	m	struct:args_t
localFeatureIndex	FeatureData.h	/^int FeatureData::localFeatureIndex(int gf) {$/;"	f	class:FeatureData
loss	StaticTree.h	/^                double label, loss;$/;"	m	class:StaticNode
m_infty	StaticTree.h	/^                int m_infty, m_s;$/;"	m	class:StaticNode
m_s	StaticTree.h	/^                int m_infty, m_s;$/;"	m	class:StaticNode
main	main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
maxDepth	args.h	/^	int maxDepth;$/;"	m	struct:args_t
maxindex	InstanceData.h	/^		int minindex, maxindex;$/;"	m	class:InstanceData
minindex	InstanceData.h	/^		int minindex, maxindex;$/;"	m	class:InstanceData
myid	FeatureData.h	/^		int myid, numprocs;$/;"	m	class:FeatureData
myid	args.h	/^    int myid;$/;"	m	struct:args_t
myslice	main.cpp	/^void myslice(int myid, int numprocs, int size, int &start, int &nextstart) {$/;"	f
node	FeatureData.h	/^		int* node; \/\/ last node reached in tree, permits constant time classification at each level$/;"	m	class:FeatureData
nodes	StaticTree.h	/^                int depth, layer, nodes;$/;"	m	class:StaticTree
nodesAtDepth	StaticTree.h	/^int StaticTree::nodesAtDepth(int d) {$/;"	f	class:StaticTree
numFeatures	args.h	/^	int numFeatures;$/;"	m	struct:args_t
numProcs	args.h	/^    int numProcs;$/;"	m	struct:args_t
numTrees	args.h	/^	int numTrees;$/;"	m	struct:args_t
numfeatures	FeatureData.h	/^		int numfeatures; \/\/ number of features stored on this processor$/;"	m	class:FeatureData
numfeatures	InstanceData.h	/^		int numfeatures; \/\/ number of features stored on this processor$/;"	m	class:InstanceData
numprocs	FeatureData.h	/^		int myid, numprocs;$/;"	m	class:FeatureData
numqueries	FeatureData.h	/^		int numqueries; \/\/ number of queries in the data set$/;"	m	class:FeatureData
numqueries	InstanceData.h	/^		int numqueries; \/\/ number of queries in the data set$/;"	m	class:InstanceData
operator ()	FeatureData.h	/^	bool operator() (FeatureValuePair* fv1, FeatureValuePair* fv2) {$/;"	f	struct:CompareFeatureValuePairs
operator ()	FeatureData.h	/^	bool operator() (const SparseFeature a, const SparseFeature b) const {$/;"	f	struct:VectorSortP
operator ()	metrics.h	/^	public: bool operator() (Document d1, Document d2) { return (d1.pred < d2.pred); }$/;"	f	class:CompareDocuments
parseFeatureValue	FeatureData.h	/^bool FeatureData::parseFeatureValue(string &cfeature, string &cvalue) {$/;"	f	class:FeatureData
parseFeatureValue	InstanceData.h	/^bool InstanceData::parseFeatureValue(string &cfeature, string &cvalue) {$/;"	f	class:InstanceData
pred	FeatureData.h	/^		double* pred; \/\/ current cumulative prediction for each instance$/;"	m	class:FeatureData
pred	InstanceData.h	/^		double* pred; \/\/ current cumulative prediction for each instance$/;"	m	class:InstanceData
pred	metrics.h	/^	double pred;$/;"	m	struct:Document
printNode	StaticTree.h	/^void StaticTree::printNode(int level, int i, double learningrate) {$/;"	f	class:StaticTree
printTree	StaticTree.h	/^void StaticTree::printTree(double learningrate) {$/;"	f	class:StaticTree
print_args	args.h	/^static void print_args(args_t& args) {$/;"	f
print_help	args.h	/^static void print_help() {$/;"	f
printmetricsheader	main.cpp	/^void printmetricsheader(args_t a) {$/;"	f
printtime	main.cpp	/^static void printtime(const char* event) {$/;"	f	file:
processLine	FeatureData.h	/^bool FeatureData::processLine(int &linenum, ifstream &input, int i) {$/;"	f	class:FeatureData
processLineHeader	InstanceData.h	/^bool InstanceData::processLineHeader(int &linenum, ifstream &input, char* &line, double &label, int &qid) {$/;"	f	class:InstanceData
qid	FeatureData.h	/^		int* qid; \/\/ query id of each instance$/;"	m	class:FeatureData
qid	InstanceData.h	/^		int* qid; \/\/ query id of each instance$/;"	m	class:InstanceData
qidtemp	InstanceData.h	/^		vector<int>* qidtemp;$/;"	m	class:InstanceData
rawfeatures	FeatureData.h	/^		vector< vector<SparseFeature> > rawfeatures;$/;"	m	class:FeatureData
read	FeatureData.h	/^bool FeatureData::read(const char* file) {$/;"	f	class:FeatureData
read	InstanceData.h	/^bool InstanceData::read(const char* file, int filesize) {$/;"	f	class:InstanceData
readtestdata	main.cpp	/^InstanceData* readtestdata(args_t a, const char *file, int size) {$/;"	f
readtrainingdata	main.cpp	/^FeatureData* readtrainingdata(args_t a, const char *file, int N) {	$/;"	f
reset	FeatureData.h	/^void FeatureData::reset() {$/;"	f	class:FeatureData
residual	FeatureData.h	/^		double* residual;  \/\/ current cumulative residual for each instance$/;"	m	class:FeatureData
run	main.cpp	/^void run(args_t a) {$/;"	f
s	StaticTree.h	/^                double s;$/;"	m	class:StaticNode
setNode	FeatureData.h	/^void FeatureData::setNode(int i, int n) {$/;"	f	class:FeatureData
shuffle	main.cpp	/^static void shuffle(int *x, int n) {$/;"	f	file:
sizeTestFile	args.h	/^	const char *testFile; bool useTestSet; int sizeTestFile;$/;"	m	struct:args_t
sizeTrainFile	args.h	/^	const char *trainFile; int sizeTrainFile;$/;"	m	struct:args_t
sizeValidFile	args.h	/^	const char *validFile; bool useValidSet; int sizeValidFile;$/;"	m	struct:args_t
sort	FeatureData.h	/^void FeatureData::sort() {$/;"	f	class:FeatureData
sortedfeatures	FeatureData.h	/^		vector< vector<SparseFeature> > sortedfeatures;$/;"	m	class:FeatureData
sparseindices	FeatureData.h	/^		vector< vector<int> > sparseindices;$/;"	m	class:FeatureData
split	StaticTree.h	/^                double split;$/;"	m	class:StaticNode
startNextLayer	StaticTree.h	/^void StaticTree::startNextLayer() {$/;"	f	class:StaticTree
storeLine	InstanceData.h	/^bool InstanceData::storeLine(char* line, int i, double label, int qid) { \/\/ uses tokenizer from call to processLineHeader()$/;"	f	class:InstanceData
testFile	args.h	/^	const char *testFile; bool useTestSet; int sizeTestFile;$/;"	m	struct:args_t
time	args.h	/^    bool time;$/;"	m	struct:args_t
trainFile	args.h	/^	const char *trainFile; int sizeTrainFile;$/;"	m	struct:args_t
updateBestSplits	StaticTree.h	/^void StaticTree::updateBestSplits(FeatureData* data, int f, int numtree) {$/;"	f	class:StaticTree
updateFromBuffer	SplitsBuffer.h	/^void SplitsBuffer::updateFromBuffer(unsigned int* nbuffer) {$/;"	f	class:SplitsBuffer
updateFromData	SplitsBuffer.h	/^void SplitsBuffer::updateFromData(FeatureData* data, StaticTree* tree) {$/;"	f	class:SplitsBuffer
updatePred	FeatureData.h	/^void FeatureData::updatePred(int i, double p) {$/;"	f	class:FeatureData
updatePred	InstanceData.h	/^void InstanceData::updatePred(int i, double p) {$/;"	f	class:InstanceData
updatePredictions	StaticTree.h	/^void StaticTree::updatePredictions(InstanceData *data, double learningrate) {$/;"	f	class:StaticTree
updateResiduals	FeatureData.h	/^void FeatureData::updateResiduals() {$/;"	f	class:FeatureData
updateSingleCore	SplitsBuffer.h	/^void SplitsBuffer::updateSingleCore(FeatureData* data, StaticTree* tree, int numtree) {$/;"	f	class:SplitsBuffer
updateTrainingPredictions	StaticTree.h	/^void StaticTree::updateTrainingPredictions(FeatureData *data, double learningrate) {$/;"	f	class:StaticTree
useTestSet	args.h	/^	const char *testFile; bool useTestSet; int sizeTestFile;$/;"	m	struct:args_t
useValidSet	args.h	/^	const char *validFile; bool useValidSet; int sizeValidFile;$/;"	m	struct:args_t
validFile	args.h	/^	const char *validFile; bool useValidSet; int sizeValidFile;$/;"	m	struct:args_t
value	FeatureData.h	/^		double value;$/;"	m	class:FeatureValuePair
value	FeatureData.h	/^	double value;$/;"	m	struct:SparseFeature
whoHasFeature	FeatureData.h	/^int FeatureData::whoHasFeature(int f) {$/;"	f	class:FeatureData
zero_l_s	StaticTree.h	/^                double zero_l_s;$/;"	m	class:StaticNode
zero_m_s	StaticTree.h	/^                int zero_m_s;$/;"	m	class:StaticNode
~FeatureData	FeatureData.h	/^FeatureData::~FeatureData() {$/;"	f	class:FeatureData
~InstanceData	InstanceData.h	/^InstanceData::~InstanceData() {$/;"	f	class:InstanceData
~SplitsBuffer	SplitsBuffer.h	/^SplitsBuffer::~SplitsBuffer() {$/;"	f	class:SplitsBuffer
~StaticTree	StaticTree.h	/^StaticTree::~StaticTree() {$/;"	f	class:StaticTree
